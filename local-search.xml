<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3. Data Types</title>
    <link href="/2024/01/01/Data-Type/"/>
    <url>/2024/01/01/Data-Type/</url>
    
    <content type="html"><![CDATA[<h1 id="《前言》"><a href="#《前言》" class="headerlink" title="《前言》"></a>《前言》</h1><p>祝福大家新年快樂。希望各位新一年都可以順順利利，身體健康。<br>希望新一年我能經常更新，繼續做好我的blog哈哈。</p><hr><h1 id="《Data-Types-介紹》"><a href="#《Data-Types-介紹》" class="headerlink" title="《Data Types 介紹》"></a>《Data Types 介紹》</h1><p>在之前的章節裡面，我們提到過變量(variable)。每一個變量其實都有一個對應的Data Types(數據類型)，基本的數據類型有以下幾種：</p><ul><li>integer（整數）</li><li>float（浮點數&#x2F;小數）</li><li>boolean（布爾數&#x2F;真假值）</li><li>string（字符串）</li></ul><p>之後還會介紹一些特殊的數據類型</p><hr><h1 id="《Integers-整數》"><a href="#《Integers-整數》" class="headerlink" title="《Integers 整數》"></a>《Integers 整數》</h1><p>整數，顧名思義就是沒有小數部分的數值</p><p>在數學的定義裡面，整數可以是正整數<code>(1,2,3...)</code>，負整數<code>(-1,-2,-3...)</code>和0</p><p>舉個🌰：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">2024</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br></code></pre></td></tr></table></figure><br>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012108812.png"></p><p>我們可以看到第一個print打印出了x的數值</p><p>第二個print則顯示了變量 x 在 python 裡的數據類型是什麼</p><p>顯示結果的<code>&lt;class &#39;int&#39;&gt;</code>，其中的<code>int</code>就表示這個變數的類型為整數</p><p>我們也可以使用<code>強轉換</code>去改變一個變數的類型，例如我們想把一個帶小數部分的數值<code>float</code>轉換成整數<code>int</code></p><p>在強轉換的過程中，它會把小數部分<code>捨去</code>而不是進行<code>四捨五入</code></p><p>舉個🌰：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-number">2024.99999</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br></code></pre></td></tr></table></figure><br>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012115818.png"></p><p>int強轉換：我們可以用int(x)，把一個變數的類型給強制轉換成int類型</p><p>但請注意並不是所有的類型都能強制轉換成int的！</p><p>比如以下這種情況：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2024.99999&#x27;</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br></code></pre></td></tr></table></figure><br>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012118074.png"></p><hr><h1 id="《Floats-浮點數》"><a href="#《Floats-浮點數》" class="headerlink" title="《Floats 浮點數》"></a>《Floats 浮點數》</h1><p>除了整數，我們還會使用浮點數來表示小數部分</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pi = <span class="hljs-number">3.141592653589793238462643383279502884197169399375105820974944</span><br><span class="hljs-built_in">print</span>(pi)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(pi))<br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012113716.png"></p><p>除此之外，我們還可以用來表示一些分數</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fraction = <span class="hljs-number">22</span>/<span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(fraction)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(fraction))<br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012120331.png"></p><p>如果我們想要讓輸出精確到多少位小數點位的話，可以使用<code>round()</code>函數</p><p><code>round</code>會傳入兩個參數</p><p>第一個參數是：需要精確的變數</p><p>第二個參數是：精確的小數位</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fraction = <span class="hljs-number">22</span>/<span class="hljs-number">7</span><br>round_fraction = <span class="hljs-built_in">round</span>(fraction, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(round_fraction) <span class="hljs-comment"># 3.143</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(round_fraction)) <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012125146.png"></p><p>如果我們想將浮點數變數表示為一個整數，我們也可以使用強轉換</p><hr><p>同樣，我們也可以用type去檢查變數的類型</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">float</span>(<span class="hljs-number">2024</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012129864.png"><br>或者可以使用 <code>2024.</code> 或 <code>2024.0</code> 他們都會被認證成浮點數。</p><p>如下圖所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">2024.</span> <br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012131036.png"></p><hr><h1 id="《Booleans-布爾數》"><a href="#《Booleans-布爾數》" class="headerlink" title="《Booleans 布爾數》"></a>《Booleans 布爾數》</h1><p>布爾數就是真假值，在python裡面主要用來做條件判斷。</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012134777.png"></p><p>除了直接賦值方式意外，我們還可以寫條件判斷：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = (<span class="hljs-number">1</span> + <span class="hljs-number">1</span> ==<span class="hljs-number">2</span>) <span class="hljs-comment">#這裡是先檢測 1+1是不是等於2，然後把結果放進去x裡面</span><br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401012136661.png"></p><p>布爾數在程序的條件判斷裡面是很關鍵的</p><hr><h1 id="《Strings-字符串》"><a href="#《Strings-字符串》" class="headerlink" title="《Strings 字符串》"></a>《Strings 字符串》</h1><p>Strings 是字符串，字符串可以是數字，字母，特殊符號和文字。在python中，字符串的內容可以放在<code>&#39; &#39;</code>或者<code>&quot; &quot;</code>內。</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&#x27;2024 01 01&#x27;</span><br>y = <span class="hljs-string">&quot;新年快樂&quot;</span><br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># 2024 01 01</span><br><span class="hljs-built_in">print</span>(y) <span class="hljs-comment"># 新年快樂</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022228243.png"></p><p>我們可以使用<code>len</code>函數來顯示字符串的長度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y = <span class="hljs-string">&#x27;新年快樂&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(y)) <span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022231294.png"></p><p>還有一種特殊字符串稱為空字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">z = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(z) <span class="hljs-comment"># </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(z)) <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022234384.png"></p><p>別以為第一行什麼都沒有打印出來，它其實是有的，只不過是一行空白行</p><p>而第二行則是長度為0</p><hr><p>現在我們試試，強轉換一下str去其他的類型吧。</p><p>先舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2024&#x27;</span>)<br>y = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;2024.0101&#x27;</span>)<br>z = <span class="hljs-built_in">bool</span>(<span class="hljs-string">&#x27;True&#x27;</span>)<br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># 2024</span><br><span class="hljs-built_in">print</span>(y) <span class="hljs-comment"># 2024.0101</span><br><span class="hljs-built_in">print</span>(z) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022239489.png"></p><p>只要我們使用正確的格式，就能轉換成其他我們想要的數據類型</p><p>反之亦然：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">str</span>(<span class="hljs-number">2024</span>)<br>y = <span class="hljs-built_in">str</span>(<span class="hljs-number">2024.0101</span>)<br>z = <span class="hljs-built_in">str</span>(<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(x) <span class="hljs-comment"># 2024</span><br><span class="hljs-built_in">print</span>(y) <span class="hljs-comment"># 2024.0101</span><br><span class="hljs-built_in">print</span>(z) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022242123.png"></p><p>字符串還有一個強大的功能，就是可以拼接</p><p>我們可以使用<code>+</code>運算符可以把兩個不同的字符串進行拼接</p><p>舉個🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&#x27;2024&#x27;</span><br>y = <span class="hljs-string">&#x27;新年快樂&#x27;</span><br><br><span class="hljs-built_in">print</span>(x + <span class="hljs-string">&quot; &quot;</span> + y) <span class="hljs-comment"># 2024 新年快樂</span><br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022244441.png"></p><p>此外，我們還可以用嵌入的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&#x27;2024&#x27;</span><br>y = <span class="hljs-string">&#x27;新年快樂&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;x&#125; &#123;y&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x=x,y=y)) <span class="hljs-comment"># 2024 新年快樂</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022247755.png"></p><p>但上面這個方法個人認為太麻煩了</p><p>推薦大家使用<code>fstring</code>的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&#x27;2024&#x27;</span><br>y = <span class="hljs-string">&#x27;新年快樂&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;x&#125;</span> <span class="hljs-subst">&#123;y&#125;</span>&quot;</span>) <span class="hljs-comment"># 2024 新年快樂</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202401022249775.png"></p><h1 id="《結語》"><a href="#《結語》" class="headerlink" title="《結語》"></a>《結語》</h1><p>最後祝大家2024 新年快樂啦！！！</p><p>也辛苦和麻煩我的小編大佬幫我去改我的內容 o.O</p><h1 id="《小編的話》"><a href="#《小編的話》" class="headerlink" title="《小編的話》"></a>《小編的話》</h1><p>在此先祝各位讀者新年快樂，同時也辛苦作者大大這幾天行動迅速，產量提升顯著 0w0。</p><p>接下來要準備開學了，作者大大和我應該會忙起來，更新也會變得不定時，所以在此向各位說一句抱歉啦(Q _ Q)。</p>]]></content>
    
    
    <categories>
      
      <category>從0開始學系列， introduction to programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
      <tag>beginner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. Function</title>
    <link href="/2023/12/25/Function/"/>
    <url>/2023/12/25/Function/</url>
    
    <content type="html"><![CDATA[<h1 id="《前言》"><a href="#《前言》" class="headerlink" title="《前言》"></a>《前言》</h1><p>各位好久不見，時隔兩個月我又回來了！中途有挺多意外的，希望今年和明年都能順順利利的度過，同時也祝大家聖誕節快樂啦🎉！！！</p><h1 id="《Function-介紹》"><a href="#《Function-介紹》" class="headerlink" title="《Function 介紹》"></a>《Function 介紹》</h1><p>在這章節裡，我們將會介紹一下Function（函數）這個概念。函數在程序裡面有很重要的作用，它的主要作用有三個：</p><ol><li>減少同樣的程式碼出現在多個地方。</li><li>令編程人員方便維護和理解程式。</li><li>將程式分成不同的模組，讓每個模組負責一個特定的功能，方便理解和維護。</li></ol><h1 id="《Function-結構》"><a href="#《Function-結構》" class="headerlink" title="《Function 結構》"></a>《Function 結構》</h1><p>在Python中， function的格式主要有兩種，分別是<code>有輸入參數和返回值</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_one</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p>以及<code>沒有輸入參數和返回值</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hello_world</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><p>以這兩個例子來說，一個function的結構有3個要素，他們分別是：</p><ol><li>def ： 用於定義函數功能 </li><li>function name： 寫在 def 後面的就是函數名稱，用於調用函數。</li></ol><blockquote><p>以上面兩個例子為例：<br><code>add_one</code> 和 <code>print_hello_world</code>就是這兩個函數的名稱。</p></blockquote><ol start="3"><li>parameter: x 可以作為variable（上節提到的）的參數傳入至function內。</li></ol><hr><p>此外，相信聰明的你也發現了，這兩個函數也有不同之處：</p><p>那就是<code>return</code>返回值。<br>為什麼會有不同呢？</p><p>這是因為在python裡面，函數有兩種形式，分別是有返回值和無返回值。</p><p>在<code>add_one</code>function裡面，x作為參數被傳入至該函數內，並且進行了 x+1 的動作，最後將結果返回。</p><p>我們簡單舉個🌰：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(x)</span></span> = x + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>不知道大家有沒有一種被中學數學支配的恐懼感，其實函數的原理就是這種數學概念。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">when</span> x = <span class="hljs-number">1</span><br><span class="hljs-attribute">f</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span> + <span class="hljs-number">1</span> = <span class="hljs-number">2</span><br><br><span class="hljs-attribute">when</span> x = <span class="hljs-number">2</span><br><span class="hljs-attribute">f</span>(<span class="hljs-number">2</span>) = <span class="hljs-number">2</span> + <span class="hljs-number">1</span> = <span class="hljs-number">3</span><br><br><span class="hljs-attribute">when</span> x = <span class="hljs-number">3</span><br><span class="hljs-attribute">f</span>(<span class="hljs-number">3</span>) = <span class="hljs-number">3</span> + <span class="hljs-number">1</span> = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>我們在python裡面可以這樣使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_one</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br><br>y = add_one(<span class="hljs-number">1</span>) <span class="hljs-comment"># y = 2</span><br></code></pre></td></tr></table></figure><p>噹噹噹！這樣我們就成功調用函數了。簡單解釋一下，我們定義了一個add_one的函數，他的作用是將輸入參數的數值加1，這個代碼在python裡面是不被直接執行的，直到我們調用它。在<code>y = add_one(1)</code>這一行裡面。</p><hr><h1 id="《Function-作用》"><a href="#《Function-作用》" class="headerlink" title="《Function 作用》"></a>《Function 作用》</h1><h2 id="重用性"><a href="#重用性" class="headerlink" title="重用性"></a>重用性</h2><p>我們來解釋一下重用性這個概念：</p><p>在代碼裡面我們盡可能的追求代碼的可重用性，為什麼呢？我們繼續舉🌰，先看以下代碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># cal the area of circle a, b ,c</span><br>r1 = <span class="hljs-number">3</span><br>a_area = <span class="hljs-number">3.14</span> * r1 * r1<br><br>r2 = <span class="hljs-number">4</span><br>b_area = <span class="hljs-number">3.14</span> * r2 * r2<br><br>r3 = <span class="hljs-number">5</span><br>c_area = <span class="hljs-number">3.14</span> * r3 * r3<br></code></pre></td></tr></table></figure><p>在這種情況下，我們會需要使用很多重複的代碼去獲取結果。</p><p>接下來我們來看看使用function之後的代碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">circle_area</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * r * r<br><br>r1 = <span class="hljs-number">3</span><br>a_area = circle_area(r1)<br><br>r2 = <span class="hljs-number">4</span><br>b_area = circle_area(r2)<br><br>r3 = <span class="hljs-number">5</span><br>c_area = circle_area(r3)<br></code></pre></td></tr></table></figure><p>試想像一下，如果這個程式需要重複一萬次，一百萬次或者更多，假如在中間出現了錯誤，那麼尋找錯誤點的時間是不是就會比較長？</p><p>在這種情況下用一個函數代替原方法，就只需要確保函數裡面的數學公式正確無誤即可，方便日後修改公式和維護。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">name1 = <span class="hljs-string">&#x27;KAI&#x27;</span><br>sex1 = <span class="hljs-string">&#x27;male&#x27;</span><br>major1 = <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name: &#x27;</span> + name1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sex: &#x27;</span> + sex1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;major: &#x27;</span> + major1)<br><br>name2 = <span class="hljs-string">&#x27;KAIKAI&#x27;</span><br>sex2 = <span class="hljs-string">&#x27;male&#x27;</span><br>major2 = <span class="hljs-string">&#x27;EE&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name: &#x27;</span> + name2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sex: &#x27;</span> + sex2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;major: &#x27;</span> + major2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_personal_info</span>(<span class="hljs-params">name, sex, major</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name: &#x27;</span> + name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sex: &#x27;</span> + sex)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;major: &#x27;</span> + major)<br><br>print_personal_info(<span class="hljs-string">&#x27;KAI&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;CS&#x27;</span>)<br>print_personal_info(<span class="hljs-string">&#x27;KAIKAI&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;EE&#x27;</span>)<br></code></pre></td></tr></table></figure><p>對比這兩個例子，這樣是不是方便很多呢～</p><hr><h2 id="解釋性"><a href="#解釋性" class="headerlink" title="解釋性"></a>解釋性</h2><p>這個也是我們程序猿需要的職業操守，如果讓我評價什麼是好的代碼，我認為好的代碼必須具備以下條件：</p><ul><li>不是花裡胡哨的數據結構和算法</li><li>不是各種高大上的面向對象</li><li>不用注釋也能讓別的程序猿看懂。</li></ul><p>我相信會有人喜歡寫一些別人看不懂的代碼，讓別人看起來覺得好像很厲害。</p><p>坦白說，其實我們自己寫的代碼，在過了一個星期之後，自己也有可能不記得當時寫了什麼（沒錯，正是在下🤦）。</p><p>這時候一段清晰且容易理解的代碼可以快速的幫助自己去回憶起當時的思路和想法。</p><p>在職場裡面，我們應該盡可能的讓自己的同事們或者上司更容易地去理解你寫的代碼。</p><p>方便我們在尋求他們幫助的時候，他們可以更快地幫你解決你遇到的問題，而不是花費時間在猜測你的代碼到底想幹嘛hhh。</p><hr><h2 id="解耦性"><a href="#解耦性" class="headerlink" title="解耦性"></a>解耦性</h2><p>這個可能就比較複雜，可能會之後再解釋。<del>絕對沒有放鴿子的意思</del>。</p><p>簡單來說就是，function盡可能遵守一個最小功能原則，就好比拼湊lego一樣。假如我們想拼出一輛車子，我們可以先組裝輪子，然後是底板，再來是車身，每個部分都是可以被獨立組裝的（define）。然後我們就像搭積木一樣，把他們組合在一起。</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>最後再次祝大家聖誕快樂啦。其實也咕了很久了哈哈哈哈，也要跟大家說聲抱歉，我也開始被我的編輯老大催稿了，希望我能繼續一邊學習，一邊上班，在閒暇之餘慢慢生產更多教學內容。</p><hr><p>小編的話: 還看？既然忙完了那就加油生產文章吧 (0 w 0)</p>]]></content>
    
    
    <categories>
      
      <category>從0開始學系列， introduction to programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
      <tag>beginner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. Arithmetic and Variables</title>
    <link href="/2023/10/19/introduction-to-programming/"/>
    <url>/2023/10/19/introduction-to-programming/</url>
    
    <content type="html"><![CDATA[<h1 id="《前言》"><a href="#《前言》" class="headerlink" title="《前言》"></a>《前言》</h1><p>這篇文章主要參考Kaggle的”Introduction to programming”，因為自己最近主要玩Kaggle比較多，而且看了挺多的教學，相對來說Kaggle的教學內容更為優秀和全面。如果大家有興趣的話，可以去Kaggle的官網玩他們的教學系列 <a href="https://www.kaggle.com/code/alexisbcook/arithmetic-and-variables">點我跳轉👉🏻Kaggle👈🏻</a>。</p><p>先來說說為什麼我會寫這篇文章吧，主要是日常生活中很多朋友都好奇我們工程師是幹什麼的，他們對編程抱有好奇心的同時，也因為從來沒有接觸過編程方面相關的知識，所以大多數都是望而卻步不敢開始。</p><p>因此我想寫一些文章教學，讓即使沒有編程背景的人看完之後，也能對編程有一些基礎的認知。</p><p>想深入學習編程的小夥伴還可以從零開始，慢慢學會如何靠自己去訓練一個機器學習的模型。</p><p>之後的文章也是以數據科學(Data Science)為主，所以在此之前還是會教一些基礎的Python語法和機制。</p><h1 id="《工作環境》"><a href="#《工作環境》" class="headerlink" title="《工作環境》"></a>《工作環境》</h1><p>對於Data Science的工作來說，我們更喜歡用Jupyter Notebook來寫一些python的程序。因為它更容易去觀察數據的變化（這個我們之後會細講）。</p><p>如果沒有安裝任何環境的朋友可以先試試Jupyter Lite。點我跳轉<a href="https://jupyter.org/try-jupyter/lab/index.html">👉🏻Jupyter Lite👈🏻</a>這裡試試。<br><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202023-10-19%20%E4%B8%8A%E5%8D%882.09.52.png"></p><p>在右邊的視窗中，找到Notebook的標題，下面點擊python(Pyodide)就完成啦~</p><p>那麼～　python 啟動(￣▽￣)／</p><h1 id="《Printing》"><a href="#《Printing》" class="headerlink" title="《Printing》"></a>《Printing》</h1><p>首先，我們先試試輸入以下的指令，然後執行它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果你能順利執行，那麼恭喜你，你已經是一個python的入門選手了。</p><p>“print” 這個指令對於有編程背景的人來說，都再熟悉不過了。它是學習任何編程語言之前最簡單，同時也是最重要的一步。這個指令的作用是 “顯示資訊”。</p><h1 id="《Arithmetic》"><a href="#《Arithmetic》" class="headerlink" title="《Arithmetic》"></a>《Arithmetic》</h1><p>我們來嘗試輸入以下的指令並且執行它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>具體的運算符號和例子如下所示：</p><table><thead><tr><th>Operation</th><th>Symbol</th><th>Example</th></tr></thead><tbody><tr><td>Addition</td><td>+</td><td>1 + 1 &#x3D; 2</td></tr><tr><td>Subtraction</td><td>-</td><td>1000 - 7 &#x3D; 993</td></tr><tr><td>Multiplication</td><td>*</td><td>10 * 4 &#x3D; 40</td></tr><tr><td>Division</td><td>&#x2F;</td><td>9 &#x2F; 3 &#x3D; 3</td></tr><tr><td>Exponent</td><td>**</td><td>3 ** 3 &#x3D; 27</td></tr></tbody></table><p>來嘗試輸入以下的python指令吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>((((<span class="hljs-number">1</span> + <span class="hljs-number">3</span>) - <span class="hljs-number">2</span>) * <span class="hljs-number">10</span> / <span class="hljs-number">5</span>) ** <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202310190223520.png"></p><h1 id="《Comments》"><a href="#《Comments》" class="headerlink" title="《Comments》"></a>《Comments》</h1><p>Comments 也是python的一個重要技能，用來為代碼寫注釋，方便我們IT🐶在交接工作或者交流時候迅速理解代碼的運行邏輯。<br>至於Comment的使用方法也很簡單，只需要在段落開始位置加上<code>#</code>符號，就可以編寫注釋</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># print a magic number</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>python的語言由機器來看，那麼comments就由我們人類來看啦！當我們寫大型project的時候，看代碼的邏輯不如看comment來得快。</p><h1 id="《Variables》"><a href="#《Variables》" class="headerlink" title="《Variables》"></a>《Variables》</h1><p>上面我們嘗試了打印一些算式，當我們想把他們保存下來該怎麼辦呢？這時候我們可以使用Variable來保存他們。</p><p>舉個栗子🌰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">number_3 = <span class="hljs-number">3</span><br>arithmetic_1 = (((<span class="hljs-number">1</span> + <span class="hljs-number">3</span>) - <span class="hljs-number">2</span>) * <span class="hljs-number">10</span> / <span class="hljs-number">5</span>) ** <span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(number_3)<br><span class="hljs-built_in">print</span>(arithmetic_1)<br></code></pre></td></tr></table></figure><p>看！ 我們已經把結果分別儲存在<code>number_3</code>和<code>arithmetic_1</code>裡面啦</p><p><img src="https://raw.githubusercontent.com/Lemonkaikai/pics/main/202310252053353.png"></p><h1 id="《結尾》"><a href="#《結尾》" class="headerlink" title="《結尾》"></a>《結尾》</h1><p>第一課已經結束啦，雖然很簡單還是拖了很久。雖遲但到吧。<br>之後也會慢慢更的，希望可以加快迭代的速度。</p>]]></content>
    
    
    <categories>
      
      <category>從0開始學系列， introduction to programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
      <tag>beginner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Start</title>
    <link href="/2023/10/07/start/"/>
    <url>/2023/10/07/start/</url>
    
    <content type="html"><![CDATA[<h1 id="新的開始🆕"><a href="#新的開始🆕" class="headerlink" title="新的開始🆕"></a>新的開始🆕</h1><p>終於又重拾了寫Blog計畫，這次應該不會🕊️了<del>希望如此</del> <br><br>最近忙忙碌碌很多東西, FYP, Placement, 上4門課，還有各種比賽</p><p>但我還是想好好的寫Blog，一來是好好紀錄自己，二來是想寫的東西希望也能對其他人有幫助。</p><p>雖然我不是什麼大佬，但如果有什麼問題可以給我留言，我也會儘量回答你們。</p><p>Blogger只是個Algo，IoT，Cloud，Data，ML各方面的菜🐔<br>利申：真係垃圾</p><h1 id="目標🎯"><a href="#目標🎯" class="headerlink" title="目標🎯"></a>目標🎯</h1><p>準時畢業是我最大的目標hhh</p><p>我曾經也試過去追GPA，CS裡面也有很多厲害的人，最後發現其實能做好眼前的事就很好了。</p><p>從2018年DSE英文獲得1的我，以為人生的終點到此為止，可能就是因為那份不甘心，我想要繼續讀下去。於是我決定開始讀基礎文憑，副學士，EE學士，又轉到CS學士，追到了2023年讀上CS year4的我。這就是我普通的人生，普通的活到現在。也會去想要挑戰很多新的東西。</p><p>接下來的日子，我想寫一寫關於ML的課程或者AWS的Cloud服務吧 <del>(順便考cert)</del> </p><p>如果有精力的話再寫python的入門和Data Structure and Algorithm（DSA）讓我喜歡上Programming的一門課，通往新世界的大門。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
